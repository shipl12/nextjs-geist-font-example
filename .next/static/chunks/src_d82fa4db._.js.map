{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAyC;IACzE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,ucACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/translator/page.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport { Card } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { ArrowLeft, ArrowRightLeft } from \"lucide-react\"\nimport Link from \"next/link\"\n\n// Define types for translations\ntype TranslationKey = \n  | \"Mass Air Flow Sensor\"\n  | \"Engine Control Unit\"\n  | \"Transmission Control Module\"\n  | \"ABS Control Module\"\n  | \"Fault Code\"\n  | \"Check Engine Light\"\n  | \"Diagnostic Trouble Code\"\n  | \"Wiring Diagram\"\n  | \"Component Location\"\n  | \"Technical Specifications\"\n\n// Mock translation data - in real app this would use a translation API\nconst mockTranslations: Record<TranslationKey, string> = {\n  \"Mass Air Flow Sensor\": \"حساس تدفق الهواء الكتلي\",\n  \"Engine Control Unit\": \"وحدة التحكم بالمحرك\",\n  \"Transmission Control Module\": \"وحدة التحكم بناقل الحركة\",\n  \"ABS Control Module\": \"وحدة التحكم بنظام الفرامل المانع للانغلاق\",\n  \"Fault Code\": \"رمز الخطأ\",\n  \"Check Engine Light\": \"ضوء فحص المحرك\",\n  \"Diagnostic Trouble Code\": \"رمز عطل التشخيص\",\n  \"Wiring Diagram\": \"مخطط الأسلاك\",\n  \"Component Location\": \"موقع المكون\",\n  \"Technical Specifications\": \"المواصفات الفنية\"\n}\n\n// Common technical terms\nconst commonTerms = [\n  \"Mass Air Flow Sensor\",\n  \"Engine Control Unit\",\n  \"Transmission Control Module\",\n  \"ABS Control Module\",\n  \"Fault Code\",\n  \"Check Engine Light\",\n  \"Diagnostic Trouble Code\",\n  \"Wiring Diagram\",\n  \"Component Location\",\n  \"Technical Specifications\"\n]\n\nexport default function Translator() {\n  const [inputText, setInputText] = useState(\"\")\n  const [outputText, setOutputText] = useState(\"\")\n  const [isEnglishToArabic, setIsEnglishToArabic] = useState(true)\n\nconst handleTranslate = () => {\n    // In a real app, this would call a translation API\n    if (isEnglishToArabic) {\n      // Check if the input text is a valid translation key\n      const translated = mockTranslations[inputText as TranslationKey] || \"Translation not found\"\n      setOutputText(translated)\n    } else {\n      const entry = Object.entries(mockTranslations).find(([_, value]) => value === inputText)\n      setOutputText(entry ? entry[0] : \"Translation not found\")\n    }\n  }\n\n  const handleSwapLanguages = () => {\n    setIsEnglishToArabic(!isEnglishToArabic)\n    setInputText(\"\")\n    setOutputText(\"\")\n  }\n\n  return (\n    <main className=\"min-h-screen p-6 md:p-12 bg-zinc-950\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"text-zinc-400 hover:text-white\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Button>\n          </Link>\n        </div>\n\n        <h1 className=\"text-3xl font-bold text-white mb-8\">Technical Translator</h1>\n\n        <Card className=\"p-6 bg-zinc-900 border-zinc-800 mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-lg font-medium text-white\">\n              {isEnglishToArabic ? \"English to Arabic\" : \"Arabic to English\"}\n            </h2>\n            <Button\n              variant=\"outline\"\n              onClick={handleSwapLanguages}\n              className=\"border-zinc-700 text-zinc-400 hover:text-white\"\n            >\n              <ArrowRightLeft className=\"h-4 w-4 mr-2\" />\n              Swap Languages\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-zinc-400 mb-2\">\n                {isEnglishToArabic ? \"English Text\" : \"Arabic Text\"}\n              </label>\n              <Textarea\n                placeholder=\"Enter text to translate...\"\n                value={inputText}\n                onChange={(e) => setInputText(e.target.value)}\n                className=\"h-40 bg-zinc-800 border-zinc-700 text-white\"\n                dir={isEnglishToArabic ? \"ltr\" : \"rtl\"}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-zinc-400 mb-2\">\n                {isEnglishToArabic ? \"Arabic Translation\" : \"English Translation\"}\n              </label>\n              <Textarea\n                value={outputText}\n                readOnly\n                className=\"h-40 bg-zinc-800 border-zinc-700 text-white\"\n                dir={isEnglishToArabic ? \"rtl\" : \"ltr\"}\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-6\">\n            <Button \n              onClick={handleTranslate}\n              className=\"w-full bg-yellow-500 text-black hover:bg-yellow-600\"\n            >\n              Translate\n            </Button>\n          </div>\n        </Card>\n\n        <Card className=\"p-6 bg-zinc-900 border-zinc-800\">\n          <h2 className=\"text-lg font-medium text-white mb-4\">Common Technical Terms</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {commonTerms.map((term) => (\n              <Button\n                key={term}\n                variant=\"outline\"\n                onClick={() => {\n                  setInputText(isEnglishToArabic ? term : mockTranslations[term as TranslationKey])\n                }}\n                className=\"justify-start border-zinc-700 text-zinc-400 hover:text-white\"\n              >\n                {isEnglishToArabic ? term : mockTranslations[term as TranslationKey]}\n              </Button>\n            ))}\n          </div>\n        </Card>\n      </div>\n    </main>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}